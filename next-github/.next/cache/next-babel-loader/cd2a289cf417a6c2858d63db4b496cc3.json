{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\n\nvar MyCount =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyCount, _React$Component);\n\n  function MyCount() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MyCount);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyCount)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      count: 0\n    });\n\n    return _this;\n  }\n\n  _createClass(MyCount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interval = setInterval(function () {\n        _this2.setState({\n          count: _this2.state.count + 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"span\", null, this.state.count);\n    }\n  }]);\n\n  return MyCount;\n}(React.Component);\n\nfunction MyCountFunc() {\n  var _useState = useState(0),\n      count = _useState[0],\n      setCount = _useState[1]; // [a, b]\n  // setCount用法\n  // setCount(1)\n  // setCount((c) => c + 1 )\n\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      setCount(function (c) {\n        return c + 1;\n      });\n    }, 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  return __jsx(\"span\", null, count);\n}\n\nexport default MyCountFunc;","map":{"version":3,"sources":["d:\\reactStudy\\Next-Koa-GitHub\\next-github\\pages\\test\\ccc.js"],"names":["React","useState","useEffect","MyCount","count","interval","setInterval","setState","state","clearInterval","Component","MyCountFunc","setCount","c"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;IAEMC,O;;;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,KAAK,EAAE;AADD,K;;;;;;;wCAGY;AAAA;;AAClB,WAAKC,QAAL,GAAgBC,WAAW,CAAC,YAAM;AAChC,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEH,UAAAA,KAAK,EAAE,MAAI,CAACI,KAAL,CAAWJ,KAAX,GAAmB;AAA5B,SAAd;AACD,OAF0B,EAExB,IAFwB,CAA3B;AAGD;;;2CACsB;AACrB,UAAI,KAAKC,QAAT,EAAmB;AACjBI,QAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACD;AACF;;;6BACS;AACR,aAAO,oBAAQ,KAAKG,KAAL,CAAWJ,KAAnB,CAAP;AACD;;;;EAhBmBJ,KAAK,CAACU,S;;AAoB5B,SAASC,WAAT,GAAuB;AAAA,kBACOV,QAAQ,CAAC,CAAD,CADf;AAAA,MACbG,KADa;AAAA,MACNQ,QADM,iBACmB;AAExC;AACA;AACA;;;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMG,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjCM,MAAAA,QAAQ,CAAC,UAAAC,CAAC;AAAA,eAAIA,CAAC,GAAG,CAAR;AAAA,OAAF,CAAR;AACD,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO;AAAA,aAAMJ,aAAa,CAACJ,QAAD,CAAnB;AAAA,KAAP;AACD,GALQ,EAKN,EALM,CAAT;AAOA,SAAO,oBAAQD,KAAR,CAAP;AACD;;AAED,eAAeO,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nclass MyCount extends React.Component {\r\n  state = {\r\n    count: 0\r\n  }\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({ count: this.state.count + 1 })\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n  render () {\r\n    return <span>{ this.state.count }</span>\r\n  }\r\n}\r\n\r\n\r\nfunction MyCountFunc() {\r\n  const [ count, setCount ] = useState(0) // [a, b]\r\n\r\n  // setCount用法\r\n  // setCount(1)\r\n  // setCount((c) => c + 1 )\r\n  \r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCount(c => c + 1)\r\n    }, 1000)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <span>{ count }</span>\r\n}\r\n\r\nexport default MyCountFunc"]},"metadata":{},"sourceType":"module"}