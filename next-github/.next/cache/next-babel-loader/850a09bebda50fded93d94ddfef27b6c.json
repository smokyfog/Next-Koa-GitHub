{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useReducer, useEffect, useLayoutEffect, useContext, useRef, memo, useMemo, useCallback } from 'react';\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(countReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('jock');\n  const config = useMemo(() => ({\n    text: `count is ${count}`,\n    color: count > 3 ? 'red' : 'blue'\n  }), [count]);\n  const handleButtonClick = useCallback(() => dispatchCount({\n    type: 'add'\n  }), []); //这里我们也可以用useMemo来记忆方法,实际上useCallback就是useMemo的简化\n  // const handleButtonClick = useMemo(\n  //   () => () => dispatchCount({ type: 'add' }),\n  //   []\n  // )\n\n  const handleAlertClick = function () {\n    setTimeout(() => {\n      alert(count);\n    }, 2000);\n  };\n\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: name,\n    onChange: e => setName(e.target.value)\n  }), __jsx(Child, {\n    config: config,\n    onButtonClick: handleButtonClick\n  }), __jsx(\"button\", {\n    onClick: handleAlertClick\n  }, \"AlertCount\"));\n}\n\nconst Child = memo(function Child({\n  onButtonClick,\n  config\n}) {\n  console.log('child render');\n  return __jsx(\"button\", {\n    onClick: onButtonClick,\n    style: {\n      color: config.color\n    }\n  }, config.text);\n});\nexport default MyCountFunc;","map":{"version":3,"sources":["D:\\study\\Next-Koa-GitHub\\next-github\\pages\\test\\b.js"],"names":["React","useState","useReducer","useEffect","useLayoutEffect","useContext","useRef","memo","useMemo","useCallback","countReducer","state","action","type","MyCountFunc","count","dispatchCount","name","setName","config","text","color","handleButtonClick","handleAlertClick","setTimeout","alert","e","target","value","Child","onButtonClick","console","log"],"mappings":";AAAA,OACEA,KADF,IAGIC,QAHJ,EAIIC,UAJJ,EAKIC,SALJ,EAMIC,eANJ,EAOIC,UAPJ,EAQIC,MARJ,EASIC,IATJ,EAUIC,OAVJ,EAWIC,WAXJ,QAYS,OAZT;;AAcA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASG,WAAT,GAAuB;AACrB,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAA2Bd,UAAU,CAACQ,YAAD,EAAe,CAAf,CAA3C;AACA,QAAM;AAAA,OAAEO,IAAF;AAAA,OAAQC;AAAR,MAAoBjB,QAAQ,CAAC,MAAD,CAAlC;AAEA,QAAMkB,MAAM,GAAGX,OAAO,CACpB,OAAO;AACLY,IAAAA,IAAI,EAAI,YAAWL,KAAM,EADpB;AAELM,IAAAA,KAAK,EAAEN,KAAK,GAAG,CAAR,GAAY,KAAZ,GAAoB;AAFtB,GAAP,CADoB,EAKnB,CAACA,KAAD,CALmB,CAAtB;AAOA,QAAMO,iBAAiB,GAAGb,WAAW,CACnC,MAAOO,aAAa,CAAC;AAAEH,IAAAA,IAAI,EAAE;AAAR,GAAD,CADe,EAEnC,EAFmC,CAArC,CAXqB,CAgBrB;AACA;AACA;AACA;AACA;;AACA,QAAMU,gBAAgB,GAAG,YAAY;AACnCC,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,KAAK,CAACV,KAAD,CAAL;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJD;;AAMA,SACE,mBACE;AAAO,IAAA,KAAK,EAAGE,IAAf;AAAsB,IAAA,QAAQ,EAAGS,CAAD,IAAOR,OAAO,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV;AAA9C,IADF,EAEE,MAAC,KAAD;AACE,IAAA,MAAM,EAAET,MADV;AAEE,IAAA,aAAa,EAAEG;AAFjB,IAFF,EAME;AAAS,IAAA,OAAO,EAAIC;AAApB,kBANF,CADF;AAUD;;AAED,MAAMM,KAAK,GAAGtB,IAAI,CAAC,SAASsB,KAAT,CAAe;AAAEC,EAAAA,aAAF;AAAiBX,EAAAA;AAAjB,CAAf,EAA0C;AAC1DY,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SACE;AAAQ,IAAA,OAAO,EAAGF,aAAlB;AAAkC,IAAA,KAAK,EAAE;AAACT,MAAAA,KAAK,EAAEF,MAAM,CAACE;AAAf;AAAzC,KACGF,MAAM,CAACC,IADV,CADF;AAKF,CAPiB,CAAlB;AASA,eAAeN,WAAf","sourcesContent":["import \r\n  React, \r\n  { \r\n    useState, \r\n    useReducer, \r\n    useEffect, \r\n    useLayoutEffect,\r\n    useContext, \r\n    useRef,\r\n    memo,\r\n    useMemo,\r\n    useCallback\r\n  } from 'react'\r\n\r\nfunction countReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return state + 1\r\n    case 'minus':\r\n      return state - 1\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction MyCountFunc() {\r\n  const [ count, dispatchCount ] = useReducer(countReducer, 0)\r\n  const [ name, setName ] = useState('jock')\r\n\r\n  const config = useMemo(\r\n    () => ({\r\n      text:  `count is ${count}`,\r\n      color: count > 3 ? 'red' : 'blue',\r\n    }\r\n  ), [count])\r\n\r\n  const handleButtonClick = useCallback(\r\n    () =>  dispatchCount({ type: 'add' }), \r\n    []\r\n  )\r\n\r\n  //这里我们也可以用useMemo来记忆方法,实际上useCallback就是useMemo的简化\r\n  // const handleButtonClick = useMemo(\r\n  //   () => () => dispatchCount({ type: 'add' }),\r\n  //   []\r\n  // )\r\n  const handleAlertClick = function () {\r\n    setTimeout(() => {\r\n      alert(count)\r\n    }, 2000)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input value={ name } onChange={(e) => setName(e.target.value)} />\r\n      <Child\r\n        config={config}\r\n        onButtonClick={handleButtonClick}\r\n      />\r\n      <button  onClick ={ handleAlertClick }>AlertCount</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Child = memo(function Child({ onButtonClick, config }) {\r\n   console.log('child render')\r\n   return (\r\n     <button onClick={ onButtonClick } style={{color: config.color}}>\r\n       {config.text}\r\n     </button>\r\n   )\r\n}) \r\n\r\nexport default MyCountFunc"]},"metadata":{},"sourceType":"module"}