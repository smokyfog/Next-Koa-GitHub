{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState, useReducer, useEffect } from 'react';\n\nclass MyCount extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    return __jsx(\"span\", null, this.state.count);\n  }\n\n}\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  // const [ count, setCount ] = useState(0) // [a, b]\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(countReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('jock'); // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     // setCount用法\n  //     // setCount(1)\n  //     // setCount((c) => c + 1 )\n  //     // setCount(c => c + 1)\n  //     dispatchCount({ type: 'add' })\n  //   }, 1000)\n  //   return () => clearInterval(interval)\n  // }, [])\n\n  useEffect(() => {\n    console.log('effect invoked'); // 后执行\n\n    return () => console.log('effect deteched'); // 先执行\n  }, [count]);\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: name,\n    onChange: e => setName(e.target.value)\n  }), __jsx(\"button\", {\n    onClick: () => dispatchCount({\n      type: 'add'\n    })\n  }, count));\n}\n\nexport default MyCountFunc;","map":{"version":3,"sources":["d:\\reactStudy\\Next-Koa-GitHub\\next-github\\pages\\test\\ccc.js"],"names":["React","useState","useReducer","useEffect","MyCount","Component","count","componentDidMount","interval","setInterval","setState","state","componentWillUnmount","clearInterval","render","countReducer","action","type","MyCountFunc","dispatchCount","name","setName","console","log","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;;AAEA,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAsC;AAAA;AAAA;;AAAA,mCAC5B;AACNC,MAAAA,KAAK,EAAE;AADD,KAD4B;AAAA;;AAIpCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWL,KAAX,GAAmB;AAA5B,OAAd;AACD,KAF0B,EAExB,IAFwB,CAA3B;AAGD;;AACDM,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKJ,QAAT,EAAmB;AACjBK,MAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACD;AACF;;AACDM,EAAAA,MAAM,GAAI;AACR,WAAO,oBAAQ,KAAKH,KAAL,CAAWL,KAAnB,CAAP;AACD;;AAhBmC;;AAmBtC,SAASS,YAAT,CAAsBJ,KAAtB,EAA6BK,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAON,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASO,WAAT,GAAuB;AACrB;AAEA,QAAM;AAAA,OAAEZ,KAAF;AAAA,OAASa;AAAT,MAA2BjB,UAAU,CAACa,YAAD,EAAe,CAAf,CAA3C;AACA,QAAM;AAAA,OAAEK,IAAF;AAAA,OAAQC;AAAR,MAAoBpB,QAAQ,CAAC,MAAD,CAAlC,CAJqB,CAOrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADc,CACgB;;AAC9B,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAb,CAFc,CAE8B;AAC7C,GAHQ,EAGN,CAACjB,KAAD,CAHM,CAAT;AAKA,SACE,mBACE;AAAO,IAAA,KAAK,EAAGc,IAAf;AAAsB,IAAA,QAAQ,EAAGI,CAAD,IAAOH,OAAO,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV;AAA9C,IADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAMP,aAAa,CAAC;AAACF,MAAAA,IAAI,EAAE;AAAP,KAAD;AAApC,KAAuDX,KAAvD,CAFF,CADF;AAMD;;AAED,eAAeY,WAAf","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react'\r\n\r\nclass MyCount extends React.Component {\r\n  state = {\r\n    count: 0\r\n  }\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({ count: this.state.count + 1 })\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n  render () {\r\n    return <span>{ this.state.count }</span>\r\n  }\r\n}\r\n\r\nfunction countReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return state + 1\r\n    case 'minus':\r\n      return state - 1\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction MyCountFunc() {\r\n  // const [ count, setCount ] = useState(0) // [a, b]\r\n\r\n  const [ count, dispatchCount ] = useReducer(countReducer, 0)\r\n  const [ name, setName ] = useState('jock')\r\n\r\n  \r\n  // useEffect(() => {\r\n  //   const interval = setInterval(() => {\r\n  //     // setCount用法\r\n  //     // setCount(1)\r\n  //     // setCount((c) => c + 1 )\r\n  //     // setCount(c => c + 1)\r\n  //     dispatchCount({ type: 'add' })\r\n  //   }, 1000)\r\n  //   return () => clearInterval(interval)\r\n  // }, [])\r\n\r\n  useEffect(() => {\r\n    console.log('effect invoked') // 后执行\r\n    return () => console.log('effect deteched') // 先执行\r\n  }, [count])  \r\n\r\n  return (\r\n    <div>\r\n      <input value={ name } onChange={(e) => setName(e.target.value)} />\r\n      <button onClick={() => dispatchCount({type: 'add'})}>{ count }</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyCountFunc"]},"metadata":{},"sourceType":"module"}