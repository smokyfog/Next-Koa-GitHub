{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState, useReducer, useEffect, useLayoutEffect, useContext, useRef } from 'react';\nimport MyContext from '../../lib/my-context';\n\nvar MyCount =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyCount, _React$Component);\n\n  function MyCount() {\n    var _this;\n\n    _classCallCheck(this, MyCount);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyCount).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      count: 0\n    });\n\n    _this.ref = React.createRef();\n    return _this;\n  }\n\n  _createClass(MyCount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.refs.current;\n      this.interval = setInterval(function () {\n        _this2.setState({\n          count: _this2.state.count + 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"span\", {\n        ref: this.ref\n      }, this.state.count);\n    }\n  }]);\n\n  return MyCount;\n}(React.Component);\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFunc() {\n  // const [ count, setCount ] = useState(0) // [a, b]\n  var _useReducer = useReducer(countReducer, 0),\n      count = _useReducer[0],\n      dispatchCount = _useReducer[1];\n\n  var _useState = useState('jock'),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var context = useContext(MyContext);\n  var inputRef = useRef(); // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     // setCount用法\n  //     // setCount(1)\n  //     // setCount((c) => c + 1 )\n  //     // setCount(c => c + 1)\n  //     dispatchCount({ type: 'add' })\n  //   }, 1000)\n  //   return () => clearInterval(interval)\n  // }, [])\n  // 会在更新dom节点树且被挂载到页面上之后执行\n\n  useEffect(function () {\n    console.log(inputRef);\n    return function () {\n      return console.log('effect deteched');\n    }; // 先执行\n  }, [count]); // 只有数组中的状态发生变化时才会先卸载return的值，在重新执行上面的部分， 若传入这个数组，则每次发生状态的变更都会执行卸载然后执行上面的内容\n  // 会在更新dom节点树而没有被挂载到页面上之前执行\n\n  useLayoutEffect(function () {\n    console.log('layout effect invoked'); // 后执行\n\n    return function () {\n      return console.log('layout effect deteched');\n    }; // 先执行\n  }, [count]);\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    ref: inputRef,\n    value: name,\n    onChange: function onChange(e) {\n      return setName(e.target.value);\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return dispatchCount({\n        type: 'add'\n      });\n    }\n  }, count), __jsx(\"p\", null, context));\n}\n\nexport default MyCountFunc;","map":{"version":3,"sources":["D:\\study\\Next-Koa-GitHub\\next-github\\pages\\test\\ccc.js"],"names":["React","useState","useReducer","useEffect","useLayoutEffect","useContext","useRef","MyContext","MyCount","count","ref","createRef","refs","current","interval","setInterval","setState","state","clearInterval","Component","countReducer","action","type","MyCountFunc","dispatchCount","name","setName","context","inputRef","console","log","e","target","value"],"mappings":";;;;;;;;AAAA,OACEA,KADF,IAGIC,QAHJ,EAIIC,UAJJ,EAKIC,SALJ,EAMIC,eANJ,EAOIC,UAPJ,EAQIC,MARJ,QASS,OATT;AAWA,OAAOC,SAAP,MAAsB,sBAAtB;;IAEMC,O;;;;;AACJ,qBAAc;AAAA;;AAAA;;AACZ;;AADY,4DAIN;AACNC,MAAAA,KAAK,EAAE;AADD,KAJM;;AAEZ,UAAKC,GAAL,GAAWV,KAAK,CAACW,SAAN,EAAX;AAFY;AAGb;;;;wCAImB;AAAA;;AAClB,WAAKC,IAAL,CAAUC,OAAV;AACA,WAAKC,QAAL,GAAgBC,WAAW,CAAC,YAAM;AAChC,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEP,UAAAA,KAAK,EAAE,MAAI,CAACQ,KAAL,CAAWR,KAAX,GAAmB;AAA5B,SAAd;AACD,OAF0B,EAExB,IAFwB,CAA3B;AAGD;;;2CACsB;AACrB,UAAI,KAAKK,QAAT,EAAmB;AACjBI,QAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACD;AACF;;;6BACS;AACR,aAAO;AAAM,QAAA,GAAG,EAAE,KAAKJ;AAAhB,SAAuB,KAAKO,KAAL,CAAWR,KAAlC,CAAP;AACD;;;;EArBmBT,KAAK,CAACmB,S;;AAwB5B,SAASC,YAAT,CAAsBH,KAAtB,EAA6BI,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAOL,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASM,WAAT,GAAuB;AACrB;AADqB,oBAGYrB,UAAU,CAACkB,YAAD,EAAe,CAAf,CAHtB;AAAA,MAGbX,KAHa;AAAA,MAGNe,aAHM;;AAAA,kBAIKvB,QAAQ,CAAC,MAAD,CAJb;AAAA,MAIbwB,IAJa;AAAA,MAIPC,OAJO;;AAKrB,MAAMC,OAAO,GAAGtB,UAAU,CAACE,SAAD,CAA1B;AACA,MAAMqB,QAAQ,GAAGtB,MAAM,EAAvB,CANqB,CAQrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAH,EAAAA,SAAS,CAAC,YAAM;AACd0B,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAO;AAAA,aAAMC,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAN;AAAA,KAAP,CAFc,CAE8B;AAC7C,GAHQ,EAGN,CAACrB,KAAD,CAHM,CAAT,CApBqB,CAuBR;AAEb;;AACAL,EAAAA,eAAe,CAAC,YAAM;AACpByB,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADoB,CACiB;;AACrC,WAAO;AAAA,aAAMD,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,KAAP,CAFoB,CAE+B;AACpD,GAHc,EAGZ,CAACrB,KAAD,CAHY,CAAf;AAKA,SACE,mBACE;AAAO,IAAA,GAAG,EAAGmB,QAAb;AAAwB,IAAA,KAAK,EAAGH,IAAhC;AAAuC,IAAA,QAAQ,EAAE,kBAACM,CAAD;AAAA,aAAOL,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AAAA;AAAjD,IADF,EAEE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMT,aAAa,CAAC;AAACF,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAnB;AAAA;AAAjB,KAAuDb,KAAvD,CAFF,EAGE,iBAAMkB,OAAN,CAHF,CADF;AAOD;;AAED,eAAeJ,WAAf","sourcesContent":["import \r\n  React, \r\n  { \r\n    useState, \r\n    useReducer, \r\n    useEffect, \r\n    useLayoutEffect,\r\n    useContext, \r\n    useRef\r\n  } from 'react'\r\n\r\nimport MyContext from '../../lib/my-context'\r\n\r\nclass MyCount extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.ref = React.createRef()\r\n  }\r\n  state = {\r\n    count: 0\r\n  }\r\n  componentDidMount() {\r\n    this.refs.current\r\n    this.interval = setInterval(() => {\r\n      this.setState({ count: this.state.count + 1 })\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n  render () {\r\n    return <span ref={this.ref}>{ this.state.count }</span>\r\n  }\r\n}\r\n\r\nfunction countReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return state + 1\r\n    case 'minus':\r\n      return state - 1\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction MyCountFunc() {\r\n  // const [ count, setCount ] = useState(0) // [a, b]\r\n\r\n  const [ count, dispatchCount ] = useReducer(countReducer, 0)\r\n  const [ name, setName ] = useState('jock')\r\n  const context = useContext(MyContext)\r\n  const inputRef = useRef()\r\n  \r\n  // useEffect(() => {\r\n  //   const interval = setInterval(() => {\r\n  //     // setCount用法\r\n  //     // setCount(1)\r\n  //     // setCount((c) => c + 1 )\r\n  //     // setCount(c => c + 1)\r\n  //     dispatchCount({ type: 'add' })\r\n  //   }, 1000)\r\n  //   return () => clearInterval(interval)\r\n  // }, [])\r\n\r\n  // 会在更新dom节点树且被挂载到页面上之后执行\r\n  useEffect(() => {\r\n    console.log(inputRef)\r\n    return () => console.log('effect deteched') // 先执行\r\n  }, [count])  // 只有数组中的状态发生变化时才会先卸载return的值，在重新执行上面的部分， 若传入这个数组，则每次发生状态的变更都会执行卸载然后执行上面的内容\r\n\r\n  // 会在更新dom节点树而没有被挂载到页面上之前执行\r\n  useLayoutEffect(() => {\r\n    console.log('layout effect invoked') // 后执行\r\n    return () => console.log('layout effect deteched') // 先执行\r\n  }, [count])\r\n\r\n  return (\r\n    <div>\r\n      <input ref={ inputRef } value={ name } onChange={(e) => setName(e.target.value)} />\r\n      <button onClick={() => dispatchCount({type: 'add'})}>{ count }</button>\r\n      <p >{ context }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyCountFunc"]},"metadata":{},"sourceType":"module"}